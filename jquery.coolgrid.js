// Generated by CoffeeScript 1.6.1
(function() {

  (function($) {
    $.CoolGrid = function(element, options) {
      var defaults, plugin;
      defaults = {
        auto_resize: true,
        container: $('.items'),
        offset: 2,
        item_width: 210
      };
      plugin = this;
      plugin.resize_timer = null;
      plugin.options = $.fn.extend(defaults, options);
      plugin.init = function() {
        if (plugin.options.auto_resize) {
          $(window).bind('resize.CoolGrid', plugin._on_resize);
        }
        return plugin;
      };
      plugin._on_resize = function() {
        clearTimeout(plugin.resize_timer);
        return plugin.resize_timer = setTimeout(plugin._resize, 100);
      };
      plugin._resize = function() {
        var backup_row, columns, current_column, i, items, max_item_height, max_row_height, v, width_offset, _i, _len;
        options = plugin.options;
        columns = Math.floor(options.container.width() / options.item_width);
        items = new Array(columns);
        for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
          v = items[i];
          items[i] = [];
        }
        width_offset = (options.container.width() - (options.item_width + options.offset) * columns) / 2;
        backup_row = 0;
        current_column = 0;
        max_row_height = 0;
        max_item_height = 0;
        element.each(function(i, v) {
          var current_row, data, item_height;
          current_row = Math.floor(i / columns);
          if (current_row !== backup_row) {
            current_column = 0;
          }
          item_height = v.offsetHeight;
          backup_row = current_row;
          if (current_row === 0) {
            data = {
              top: 0,
              height: item_height,
              left_position: (options.item_width + options.offset) * current_column + width_offset
            };
          } else {
            data = {
              top: items[current_column][current_row - 1].height + items[current_column][current_row - 1].top + options.offset * 3,
              height: item_height,
              left_position: (options.item_width + options.offset) * current_column + width_offset
            };
          }
          items[current_column][current_row] = data;
          $(v).css({
            'position': 'absolute',
            'display': 'list-item',
            'top': data.top,
            'left': data.left_position
          });
          if (data.top > max_row_height) {
            max_row_height = data.top;
          }
          if ($(v).height() > max_item_height) {
            max_item_height = $(v).height();
          }
          return current_column++;
        });
        return options.container.css('height', "" + (max_row_height + max_item_height) + "px");
      };
      plugin.init();
      return plugin._resize();
    };
    return $.fn.CoolGrid = function(options) {
      var plugin;
      plugin = new $.CoolGrid(this, options);
      plugin.init();
      return plugin;
    };
  })(jQuery);

}).call(this);
